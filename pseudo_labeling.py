# -*- coding: utf-8 -*-
"""Pseudo_Labeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bE5K0kjG5NCH039vcd_1cHw2j04je4F2
"""

!pip install transformers
!pip install sentence_transformers
!pip install textract

import os
import re
import json
import textract
# import deepl
from tqdm import tqdm
import pandas as pd
import torch

# change directory & upload Rule file
from google.colab import drive
drive.mount('/content/drive')

os.chdir('/content/drive/MyDrive/Colab Notebooks')

os.getcwd()

with open(f"./processed_data.json", "r", encoding="utf-8") as f:
    processed_dict = json.load(f)

df = pd.DataFrame.from_dict(processed_dict, orient="index").stack().to_frame()
df = pd.DataFrame(df[0].values.tolist(), index=df.index)

# import model
from sentence_transformers import SentenceTransformer

model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-mpnet-base-v2')

# positive passage
p = '제6조(선발시기 및 선발방법) ① 연계과정 학생은 매학기 1회 선발함을 원칙으로 하며, 세부 일정은 대학원장이 따로 정한다.'


# 5 synthetic query by chat-GPT
question = {
"질문 1": "연계과정 학생은 언제 선발되나요?",
"질문 2": "연계과정의 선발 주기는 어떻게 되나요?",
"질문 3": "선발 일정은 누가 결정하나요?",
"질문 4": "연계과정 학생이 선택되는 데 있어서 어떤 원칙이 적용되나요?",
"질문 5": "연계과정 학생의 선발은 어떻게 이루어지나요?"
}

# make score query with rule datasets
mpnet_score = []
for _,v in question.items():
  score = []
  for i in tqdm(range(df.shape[0])):
    for j in range(df.shape[1]):
      text = df.iloc[i,j]
      if text:
        embs = model.encode([v, text])
        s = embs[0].reshape(1,-1) @ embs[1].reshape(-1,1)
        score.append((text, s))
  mpnet_score.append(score)

# top 50 query-passages and add to datasets
for i in range(len(mpnet_score)):
  mpnet_score[i] = sorted(mpnet_score[i], key = lambda x:x[1], reverse = True)[:50]

text1, score1 = zip(*mpnet_score[i])
labeling = pd.DataFrame({'negative': text1, 'score':score1})

for i in range(1,len(mpnet_score)):
  text, score = zip(*mpnet_score[i])
  df_concat = pd.DataFrame({'negative':text, 'score': score})
  labeling = pd.concat([labeling, df_concat])

query_list = []
for _,v in question.items():
  for i in range(50):
    query_list.append(v)
len(query_list)

labeling['query'] = query_list
labeling['score'] = labeling['score'].apply(lambda x: x[0][0])

# add positive column to datasets
p = '제6조(선발시기 및 선발방법) ① 연계과정 학생은 매학기 1회 선발함을 원칙으로 하며, 세부 일정은 대학원장이 따로 정한다.'

positive = []
for i in range(len(labeling)):
  positive.append(p)
print(len(positive))
labeling['positive'] = positive
labeling = labeling[['query','positive','negative','score']]

# make score query with positive passage and add to datasets
p_score=[]
text = p
for _,v in question.items():
  embs = model.encode([v, text])
  s = embs[0].reshape(1,-1) @ embs[1].reshape(-1,1)
  p_score.append(s[0][0])
p_score

positive_score =[]

for i in range(len(mpnet_score)):
  for j in range(50):
    positive_score.append(p_score[i])

# make delta by positive_score - negative_score
labeling['positive_score'] = positive_score
labeling['delta'] = labeling['positive_score'] - labeling['score']
labeling = labeling.drop(['score', 'positive_score'], axis = 1)
labeling

# dataset
labeling.to_excel('./DGPL.xlsx', encoding = 'utp-8-sig')